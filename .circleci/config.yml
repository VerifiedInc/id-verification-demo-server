version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-eks: circleci/aws-eks@2.1.2
  kubernetes: circleci/kubernetes@0.4.0
  slack: circleci/slack@4.4.2 # ref: https://github.com/CircleCI-Public/slack-orb, https://circleci.com/developer/orbs/orb/circleci/slack#usage-examples

jobs:
  test:
    docker:
      - image: cimg/node:14.15.0
        environment:
          TEST_DB_NAME: circle_test
          TEST_DB_PORT: '5432'
          TEST_DB_USER: postgres
          TEST_DB_HOST: localhost
      - image: circleci/postgres:9.6.5-alpine-ram
    steps:
      - checkout
      - restore_cache: # ref: https://circleci.com/docs/2.0/caching/#restoring-cache
          keys:
            # Find a cache corresponding to this specific package-lock.json checksum
            # when this file is changed, this key will fail
            - v2-npm-deps-{{ checksum "package-lock.json" }}
            # Find the most recently generated cache used from any branch
            - v2-npm-deps-

      - restore_cache:
          key: node-v2-{{ checksum "package.json" }}

      - run: npm install

      - save_cache:
          key: v2-npm-deps-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - save_cache:
          key: node-v2-{{ checksum "package.json" }}
          paths:
            - node_modules

      - run: npm run lint

      - run:
          name: run eslint and jest tests
          command: npm run test

  build-and-push-image:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      image_tag_1:
        type: string
      image_tag_2:
        type: string
      repo:
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push container image to ECR
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

            echo Building the Docker image...
            DOCKER_BUILDKIT=1 docker build --ssh github="$HOME/.ssh/id_rsa" -t ${CIRCLE_SHA1} .
            
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:<< parameters.image_tag_1 >>
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:<< parameters.image_tag_2 >>
            
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:<< parameters.image_tag_1 >>
            docker push << parameters.reg >>/<< parameters.repo >>:<< parameters.image_tag_2 >>
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1

  deploy-image:
    docker: # Referencing the python image here, see https://github.com/CircleCI-Public/aws-eks-orb/issues/52#issuecomment-1006838213
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        type: string
        default: "dev-customer-cluster"
      repo:
        type: string
      deployment:
        type: string
      image_tag:
        type: string
      slack_pass_notify_template:
        type: string
        default: basic_success_1
      namespace:
        type: string
        default: "default"

    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          install-kubectl: true
          aws-region: ${AWS_REGION}
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Deploy container image, << parameters.image_tag >>
          command: |
            # Set the image tag then ensure a rollout is triggered. Thanks to the deployment pod spec being set to always pull this should grab the latest image, even with the same tag.
            # ref: https://stackoverflow.com/a/55914480/2631728
            kubectl set image deployment/<< parameters.deployment >> << parameters.deployment >>=${AWS_ECR_URL}/<< parameters.repo >>:<< parameters.image_tag >> -n << parameters.namespace >>
            kubectl rollout restart deploy << parameters.deployment >> -n << parameters.namespace >>

            # Check deployment rollout status every 10 seconds (max 10 minutes) until complete.
            # ref: https://www.jeffgeerling.com/blog/2018/updating-kubernetes-deployment-and-waiting-it-roll-out-shell-script
            ATTEMPTS=0
            ROLLOUT_STATUS_CMD="kubectl rollout status deployment/<< parameters.deployment >> -n << parameters.namespace >>"
            until $ROLLOUT_STATUS_CMD || [ $ATTEMPTS -eq 60 ]; do
              $ROLLOUT_STATUS_CMD
              ATTEMPTS=$((attempts + 1))
              sleep 10
            done
      - slack/notify:
          event: fail
          mentions: '@devops-team'
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: << parameters.slack_pass_notify_template >>

workflows:
  lint-and-test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - main

  build-and-deploy:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main

      - build-and-push-image:
          requires:
            - test
          context:
            - AWS-Dev
            - Slack-Context
          repo: id-verification-demo-server
          image_tag_1: dev-latest
          image_tag_2: "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
          filters:
            branches:
              only:
                - main

      - deploy-image:
          requires:
            - build-and-push-image
          context:
            - AWS-Dev
            - Slack-Context
          repo: id-verification-demo-server
          deployment: id-verification-demo-server
          cluster-name: "dev-customer-cluster"
          image_tag: "dev-latest"
          filters:
            branches:
              only:
                - main

  build-and-deploy-sandbox:
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - build-and-push-image:
          name : build-and-push-image-sandbox
          requires:
            - test
          context:
            - AWS-Dev
            - Slack-Context
          repo: id-verification-demo-server
          image_tag_1: sandbox-latest
          image_tag_2: "${CIRCLE_TAG}"
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy-image:
          name : deploy-image-sandbox
          requires:
            - build-and-push-image-sandbox
          context:
            - AWS-Dev
            - Slack-Context
          repo: id-verification-demo-server
          deployment: id-verification-demo-server
          cluster-name: "sandbox-customer-cluster"
          image_tag: "${CIRCLE_TAG}"
          namespace: default
          slack_pass_notify_template: success_tagged_deploy_1
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  build-and-deploy-test:
    jobs:
      - test:
          filters:
            branches:
              only:
                - test-circleci

      - build-and-push-image:
          name: build-and-push-image-test
          requires:
            - test
          context:
            - AWS-Dev
            - Slack-Context
          repo: id-verification-demo-server
          image_tag_1: test-latest
          image_tag_2: "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
          filters:
            branches:
              only:
                - test-circleci

      - deploy-image:
          name: deploy-image-test
          requires:
            - build-and-push-image-test
          context:
            - AWS-Dev
            - Slack-Context
          repo: id-verification-demo-server
          deployment: id-verification-demo-server
          cluster-name: "dev-customer-cluster"
          image_tag: "test-latest"
          filters:
            branches:
              only:
                - test-circleci